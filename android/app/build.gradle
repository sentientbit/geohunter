def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

// start Key sign
def keystorePropertiesFile = rootProject.file("key.properties")  
def keystoreProperies = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperies.load(new FileInputStream(keystorePropertiesFile))
}
// end Key sign

int generateVersionCode(String versionName) {
   def parts = versionName.split("\\.").collect { it.toInteger() }
   return parts[0] * 10000 + parts[1] * 100 + parts[2]
}

android {
    // @see https://github.com/transistorsoft/flutter_background_fetch/blob/master/help/INSTALL-ANDROID.md
    compileSdkVersion rootProject.ext.compileSdkVersion

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.apsoni.geocraft"
        minSdkVersion 24
        targetSdkVersion rootProject.ext.targetSdkVersion
        //versionCode flutterVersionCode.toInteger()
        versionCode generateVersionCode(flutterVersionName)
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            keyAlias keystoreProperies["keyAlias"]
            keyPassword keystoreProperies["keyPassword"]
            storeFile file(keystoreProperies["storeFile"])
            storePassword keystoreProperies["storePassword"]
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
        }
        debug {
            debuggable true
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}
